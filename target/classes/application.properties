# configure your datasource
quarkus.datasource.username = rgorena
quarkus.datasource.password = admin
quarkus.datasource.jdbc.url = jdbc:postgresql://172.18.0.2:5432/my_store_test
quarkus.datasource.db-kind = postgresql
# drop and create the database at startup (use `update` to only update the schema)  drop-and-create
quarkus.hibernate-orm.database.generation=none


# Log Console
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

# Open Tracing
quarkus.jaeger.agent-host-port=${JAEGER_HOST_PORT}
quarkus.jaeger.service-name=msa-testcontainer
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1

# Configuracion GELF
quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.level=WARN
quarkus.log.handler.gelf.include-full-mdc=true
quarkus.log.handler.gelf.extract-stack-trace=true
quarkus.log.handler.gelf.stack-trace-throwable-reference=-1
quarkus.log.handler.gelf.additional-field."microservice".value=msa-testcontainer
quarkus.log.handler.gelf.additional-field."microservice".type=string

quarkus.log.handler.gelf.host=${GELF_HOST}

quarkus.jib.base-jvm-image = nexusdesarrollo.ruat.gob.bo:5000/imagenbase/alpine-openjdk11-base:1.0.0

quarkus.kubernetes.name=msa-testcontainer
quarkus.kubernetes.labels.app=msa-testcontainer

#controlador que permite el uso de contenedores de prueba para bases de datos
%test.quarkus.datasource.jdbc.driver=org.testcontainers.jdbc.ContainerDatabaseDriver

#establece el dialecto (lenguaje específico de la base de datos) que será utilizado por Hibernate
#para interactuar con la base de datos
%test.quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect

#Define la URL de conexión a la base de datos
%test.quarkus.datasource.jdbc.url=jdbc:tc:postgresql:latest:///test

#Establece el tamaño máximo de conexiones a la base de datos para el entorno de prueba
%test.quarkus.datasource.jdbc.max-size=16

#Especifica la estrategia de generación de la base de datos, significa que la base de datos se creará al inicio de la aplicación y se eliminará al cerrarse la aplicación
%test.quarkus.hibernate-orm.database.generation=create

#Indica que se deben crear los esquemas necesarios en la base de datos, 
#en el caso de que estén ausentes. Esta configuración es válida cuando se utiliza la estrategia create.
%test.quarkus.hibernate-orm.database.generation.create-schemas=true

#Define el tiempo límite de adquisición de conexiones a la base de datos. En este caso, se establece en 10 segundos.
%test.quarkus.datasource.jdbc.acquisition-timeout=10

#%test.quarkus.datasource.username=postgres
#%test.quarkus.datasource.password=postgres

#Indica el nombre del script que se utilizará para cargar datos en la base de datos durante el inicio de la aplicación.
%test.quarkus.hibernate-orm.sql-load-script=testimport.sql


